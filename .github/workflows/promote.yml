name: Promote

on:
  workflow_dispatch:
    inputs:
      build-zoo-handler:
        description: 'Build Zoo Handler Payload'
        required: false

jobs:
  promote:
    runs-on: self-hosted
    environment: promote
    steps:
    # need repo to push release branch and a tag
    - uses: actions/checkout@v2
    - uses: jfrog/setup-jfrog-cli@v1
      with:
        version: 1.43.2
      env:
        JF_ARTIFACTORY_LOCAL: ${{ secrets.JF_ARTIFACTORY_SECRET_LOCAL }}
    # zoo extract and ensure
    - name: Extract Zoo Context Properties
      uses: jvalkeal/build-zoo-handler@v0.0.4
      with:
        dispatch-handler-extract-context-properties: true
        ensure-env: |
          BUILD_ZOO_HANDLER_atest1_buildname
          BUILD_ZOO_HANDLER_atest1_buildnumber
          BUILD_ZOO_HANDLER_atest2_buildname
          BUILD_ZOO_HANDLER_atest2_buildnumber
          BUILD_ZOO_HANDLER_atest3_buildname
          BUILD_ZOO_HANDLER_atest3_buildnumber
          BUILD_ZOO_HANDLER_atest4_buildname
          BUILD_ZOO_HANDLER_atest4_buildnumber
    # promoting build from staging repo into release
    - name: Promote Build
      run: |
        jfrog rt build-promote $BUILD_ZOO_HANDLER_atest4_buildname $BUILD_ZOO_HANDLER_atest4_buildnumber libs-release-local
        jfrog rt build-promote $BUILD_ZOO_HANDLER_atest3_buildname $BUILD_ZOO_HANDLER_atest3_buildnumber libs-release-local
        jfrog rt build-promote $BUILD_ZOO_HANDLER_atest2_buildname $BUILD_ZOO_HANDLER_atest2_buildnumber libs-release-local
        jfrog rt build-promote $BUILD_ZOO_HANDLER_atest1_buildname $BUILD_ZOO_HANDLER_atest1_buildnumber libs-release-local

    # zoo failure
    - name: Notify Build Failure Zoo Handler Controller
      if: ${{ failure() }}
      uses: jvalkeal/build-zoo-handler@v0.0.4
      with:
        dispatch-handler-token: ${{ secrets.REPO_ACCESS_TOKEN }}
        dispatch-handler-client-payload-data: >
          {
            "event": "promotion-failed"
          }

  # wait manual approval.
  # pull released artifacts from repo and do a dance with central sync where we
  # create checksum and signature files, create staging repo and upload
  # files into it, and then finally close and release that repo.
  central:
    runs-on: self-hosted
    needs: promote
    environment: central
    steps:
    # need repo for spec file
    - uses: actions/checkout@v2
    - uses: jfrog/setup-jfrog-cli@v1
      with:
        version: 1.43.2
      env:
        JF_ARTIFACTORY_LOCAL: ${{ secrets.JF_ARTIFACTORY_SECRET_LOCAL }}
    # zoo extract and ensure
    - name: Extract Zoo Context Properties
      uses: jvalkeal/build-zoo-handler@v0.0.4
      with:
        dispatch-handler-extract-context-properties: true
        ensure-env: |
          BUILD_ZOO_HANDLER_atest1_buildname
          BUILD_ZOO_HANDLER_atest1_buildnumber
          BUILD_ZOO_HANDLER_atest2_buildname
          BUILD_ZOO_HANDLER_atest2_buildnumber
          BUILD_ZOO_HANDLER_atest3_buildname
          BUILD_ZOO_HANDLER_atest3_buildnumber
          BUILD_ZOO_HANDLER_atest4_buildname
          BUILD_ZOO_HANDLER_atest4_buildnumber
    # download released files for a build.
    # spec file defines files we actually need for central
    # as release in artifactory contains some test and samples modules
    # which we don't want in central.
    - name: Download Release Files
      run: |
        jfrog rt download \
          --spec .github/release-files-spec.json \
          --spec-vars "buildname=$BUILD_ZOO_HANDLER_atest4_buildname;buildnumber=$BUILD_ZOO_HANDLER_atest4_buildnumber"
        jfrog rt download \
          --spec .github/release-files-spec.json \
          --spec-vars "buildname=$BUILD_ZOO_HANDLER_atest3_buildname;buildnumber=$BUILD_ZOO_HANDLER_atest3_buildnumber"
        jfrog rt download \
          --spec .github/release-files-spec.json \
          --spec-vars "buildname=$BUILD_ZOO_HANDLER_atest2_buildname;buildnumber=$BUILD_ZOO_HANDLER_atest2_buildnumber"
        jfrog rt download \
          --spec .github/release-files-spec.json \
          --spec-vars "buildname=$BUILD_ZOO_HANDLER_atest1_buildname;buildnumber=$BUILD_ZOO_HANDLER_atest1_buildnumber"
    # last step, sync to central.
    - uses: jvalkeal/nexus-sync@main
      with:
        url: http://localhost:8082/nexus
        username: ${{ secrets.NEXUS_USERNAME }}
        password: ${{ secrets.NEXUS_PASSWORD }}
        staging-profile-name: test
        create: true
        upload: true
        close: true
        release: true
        generate-checksums: true
        generate-checksums-config: >
          [
            { "type": "md5", "extension": "md5" },
            { "type": "sha1", "extension": "sha1" }
          ]
        pgp-sign: true
        pgp-sign-passphrase: ${{ secrets.GPG_PASSPHRASE }}
        pgp-sign-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

    # zoo success
    - name: Notify Build Success Zoo Handler Controller
      uses: jvalkeal/build-zoo-handler@v0.0.4
      with:
        dispatch-handler-token: ${{ secrets.REPO_ACCESS_TOKEN }}
        dispatch-handler-client-payload-data: >
          {
            "event": "central-succeed"
          }

    # zoo failure
    - name: Notify Build Failure Zoo Handler Controller
      if: ${{ failure() }}
      uses: jvalkeal/build-zoo-handler@v0.0.4
      with:
        dispatch-handler-token: ${{ secrets.REPO_ACCESS_TOKEN }}
        dispatch-handler-client-payload-data: >
          {
            "event": "central-failed"
          }
